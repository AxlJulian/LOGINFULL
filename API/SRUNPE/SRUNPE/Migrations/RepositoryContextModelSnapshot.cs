// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SRUNPE.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcudienteCandidatoEstudiante", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcudienteId", "CandidatoEstudianteId");

                    b.HasIndex("CandidatoEstudianteId");

                    b.ToTable("AcudienteCandidatoEstudiante");
                });

            modelBuilder.Entity("CursoDocente", b =>
                {
                    b.Property<Guid>("CursosCursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocentesDocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CursosCursoId", "DocentesDocenteId");

                    b.HasIndex("DocentesDocenteId");

                    b.ToTable("CursoDocente");
                });

            modelBuilder.Entity("DocenteMateria", b =>
                {
                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MateriaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocenteId", "MateriaId");

                    b.HasIndex("MateriaId");

                    b.ToTable("DocenteMateria");
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Property<Guid>("AcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnType("int");

                    b.Property<long>("NumeroIdentificacionEstudiante")
                        .HasColumnType("bigint");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionConEstudiante")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcudienteId");

                    b.ToTable("Acudientes");

                    b.HasData(
                        new
                        {
                            AcudienteId = new Guid("401c4837-dedd-4b62-b9b5-c1348e1268d0"),
                            Apellidos = "Perez",
                            CorreoElectronico = "juan.perez@example.com",
                            Edad = 45,
                            EstadoCivil = "Casado",
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(7571),
                            Nombres = "Juan",
                            NumeroIdentificacion = 123456789,
                            NumeroIdentificacionEstudiante = 0L,
                            Ocupacion = "Ingeniero",
                            RelacionConEstudiante = "Padre"
                        },
                        new
                        {
                            AcudienteId = new Guid("a1b5acf4-8ff4-4324-a87b-cfc60eb0f45f"),
                            Apellidos = "Lopez",
                            CorreoElectronico = "maria.lopez@example.com",
                            Edad = 40,
                            EstadoCivil = "Casada",
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(7598),
                            Nombres = "Maria",
                            NumeroIdentificacion = 987654321,
                            NumeroIdentificacionEstudiante = 0L,
                            Ocupacion = "Abogada",
                            RelacionConEstudiante = "Madre"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.Property<Guid>("DireccionAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcudienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CiudadLocalidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColoniaBarrio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoProvincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DireccionAcudienteId");

                    b.HasIndex("AcudienteId")
                        .IsUnique();

                    b.ToTable("DireccionAcudiente");

                    b.HasData(
                        new
                        {
                            DireccionAcudienteId = new Guid("294b27f9-a77d-4d3f-8831-72e69eb263b7"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Calle 100",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110111",
                            ColoniaBarrio = "Norte",
                            EstadoProvincia = "Bogotá",
                            Pais = "Colombia"
                        },
                        new
                        {
                            DireccionAcudienteId = new Guid("28863476-8208-4962-ad19-68acd06e94f5"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Calle = "Carrera 50",
                            CiudadLocalidad = "Bogotá",
                            CodigoPostal = "110221",
                            ColoniaBarrio = "Sur",
                            EstadoProvincia = "Bogotá",
                            Pais = "Colombia"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.TelefonoAcudiente", b =>
                {
                    b.Property<Guid>("TelefonoAcudienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcudienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Indicativo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TelefonoAcudienteId");

                    b.HasIndex("AcudienteId");

                    b.ToTable("TelefonoAcudiente");

                    b.HasData(
                        new
                        {
                            TelefonoAcudienteId = new Guid("00c5fe38-81dd-4422-bc24-82b59144796a"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Indicativo = "+1",
                            Numero = -4135,
                            Tipo = "Móvil"
                        },
                        new
                        {
                            TelefonoAcudienteId = new Guid("0f275314-9c12-450e-af35-09a7001ac66a"),
                            AcudienteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Indicativo = "+1",
                            Numero = -6975,
                            Tipo = "Móvil"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Property<Guid>("AulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioDisponibilidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreNumero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrosIncidentesProblemas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoAula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime2");

                    b.HasKey("AulaId");

                    b.ToTable("Aulas");

                    b.HasData(
                        new
                        {
                            AulaId = new Guid("bd249220-eec2-4bbd-c57e-8619cb666ece"),
                            Capacidad = 50,
                            DocenteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            EstadoAula = "Disponible",
                            HorarioDisponibilidad = "Lunes a Viernes, 08:00 AM - 06:00 PM",
                            NombreNumero = "Aula 101",
                            NotasAdicionales = "Equipada con proyector",
                            RegistrosIncidentesProblemas = "Ninguno",
                            TipoAula = "Salón de Clases",
                            Ubicacion = "Edificio Principal",
                            UltimaActualizacion = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AulaId = new Guid("53c29e9a-f7b8-433b-983f-a85b823c4733"),
                            Capacidad = 30,
                            DocenteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            EstadoAula = "Ocupado",
                            HorarioDisponibilidad = "Lunes a Viernes, 10:00 AM - 05:00 PM",
                            NombreNumero = "Aula 102",
                            NotasAdicionales = "Equipado con computadoras de última generación",
                            RegistrosIncidentesProblemas = "Reporte de fallo en una computadora",
                            TipoAula = "Laboratorio de Informática",
                            Ubicacion = "Edificio de Ciencias",
                            UltimaActualizacion = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Cursos", b =>
                {
                    b.Property<Guid>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<string>("CodigoCurso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CupoActual")
                        .HasColumnType("int");

                    b.Property<int>("CupoMaximo")
                        .HasColumnType("int");

                    b.Property<string>("DepartamentoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinalizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetodosEnsenanza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CursoId");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            CursoId = new Guid("98434816-e4cc-44f5-bd89-8621aaf9d62a"),
                            Año = 2024,
                            CodigoCurso = "MAT101",
                            CupoActual = 25,
                            CupoMaximo = 30,
                            DepartamentoAcademico = "Matemáticas",
                            Descripcion = "Introducción a las Matemáticas",
                            Estado = "Activo",
                            FechaFinalizacion = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Presencial",
                            Modalidad = "Presencial",
                            Nivel = "Básico"
                        },
                        new
                        {
                            CursoId = new Guid("aaa09e75-1d3a-478e-85bd-33abe9494d93"),
                            Año = 2024,
                            CodigoCurso = "FIS102",
                            CupoActual = 35,
                            CupoMaximo = 40,
                            DepartamentoAcademico = "Ciencias Físicas",
                            Descripcion = "Física General",
                            Estado = "Activo",
                            FechaFinalizacion = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Virtual",
                            Modalidad = "En línea",
                            Nivel = "Intermedio"
                        },
                        new
                        {
                            CursoId = new Guid("bff153b6-f24f-4bca-a942-ce15593f5474"),
                            Año = 2024,
                            CodigoCurso = "HIS103",
                            CupoActual = 20,
                            CupoMaximo = 25,
                            DepartamentoAcademico = "Historia",
                            Descripcion = "Historia del Mundo Contemporáneo",
                            Estado = "Activo",
                            FechaFinalizacion = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Híbrido",
                            Modalidad = "Híbrido",
                            Nivel = "Avanzado"
                        },
                        new
                        {
                            CursoId = new Guid("0a7b87eb-6ec7-4dab-8d24-88691e1ee213"),
                            Año = 2024,
                            CodigoCurso = "LIT104",
                            CupoActual = 18,
                            CupoMaximo = 20,
                            DepartamentoAcademico = "Literatura",
                            Descripcion = "Literatura Española",
                            Estado = "Activo",
                            FechaFinalizacion = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Presencial",
                            Modalidad = "Presencial",
                            Nivel = "Básico"
                        },
                        new
                        {
                            CursoId = new Guid("5a32ad5e-eb82-4b86-9fe9-0230d90556d2"),
                            Año = 2024,
                            CodigoCurso = "QUI105",
                            CupoActual = 30,
                            CupoMaximo = 35,
                            DepartamentoAcademico = "Química",
                            Descripcion = "Química Orgánica",
                            Estado = "Activo",
                            FechaFinalizacion = new DateTime(2024, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicio = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MetodosEnsenanza = "Virtual",
                            Modalidad = "En línea",
                            Nivel = "Intermedio"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Property<Guid>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiaSemana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DuracionClaseMinutos")
                        .HasColumnType("int");

                    b.Property<string>("EstadoHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFinClases")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicioClases")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrupoSeccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<string>("NotificacionCambioHorario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.ToTable("Horarios");

                    b.HasData(
                        new
                        {
                            HorarioId = new Guid("17793c65-0075-4b33-f071-f84a0774be25"),
                            DiaSemana = "Lunes",
                            DocenteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo A",
                            HoraFin = new TimeSpan(0, 11, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 9, 0, 0, 0),
                            NotificacionCambioHorario = "No",
                            PeriodoAcademico = "Semestre de Otoño"
                        },
                        new
                        {
                            HorarioId = new Guid("75acf5e1-58d1-43e5-2385-76f0a8f0f464"),
                            DiaSemana = "Martes",
                            DocenteId = new Guid("00000000-0000-0000-0000-000000000000"),
                            DuracionClaseMinutos = 120,
                            EstadoHorario = "Activo",
                            FechaFinClases = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaInicioClases = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrupoSeccion = "Grupo B",
                            HoraFin = new TimeSpan(0, 16, 0, 0, 0),
                            HoraInicio = new TimeSpan(0, 14, 0, 0, 0),
                            NotificacionCambioHorario = "Sí",
                            PeriodoAcademico = "Semestre de Primavera"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Materias", b =>
                {
                    b.Property<Guid>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Creditos")
                        .HasColumnType("int");

                    b.Property<string>("DepartamentoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HorasPracticas")
                        .HasColumnType("int");

                    b.Property<int>("HorasTeoricas")
                        .HasColumnType("int");

                    b.Property<string>("MetodosEnsenanza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasAdicionales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MateriaId");

                    b.ToTable("Materias");

                    b.HasData(
                        new
                        {
                            MateriaId = new Guid("7b688efe-1a57-46f6-b7e7-ef43d3918ac6"),
                            Creditos = 4,
                            DepartamentoAcademico = "Matemáticas",
                            Descripcion = "Fundamentos de aritmética y álgebra",
                            Estado = "Activa",
                            HorasPracticas = 2,
                            HorasTeoricas = 3,
                            MetodosEnsenanza = "Clases teóricas y ejercicios prácticos",
                            Nivel = "Secundaria",
                            Nombre = "Matemáticas Básicas",
                            NotasAdicionales = "Ninguna"
                        },
                        new
                        {
                            MateriaId = new Guid("bce3a201-d32e-4fe5-9ce0-8fd4646311c4"),
                            Creditos = 5,
                            DepartamentoAcademico = "Física",
                            Descripcion = "Introducción a la mecánica, termodinámica y ondas",
                            Estado = "Activa",
                            HorasPracticas = 3,
                            HorasTeoricas = 4,
                            MetodosEnsenanza = "Clases teóricas, laboratorios",
                            Nivel = "Universitaria",
                            Nombre = "Física General",
                            NotasAdicionales = "Requiere calculadora científica"
                        },
                        new
                        {
                            MateriaId = new Guid("2c4aef52-dcc8-439c-beb2-6df57d1f1c0e"),
                            Creditos = 3,
                            DepartamentoAcademico = "Humanidades",
                            Descripcion = "Estudio de obras literarias españolas clásicas",
                            Estado = "Inactiva",
                            HorasPracticas = 1,
                            HorasTeoricas = 3,
                            MetodosEnsenanza = "Clases teóricas, discusiones en grupo",
                            Nivel = "Secundaria",
                            Nombre = "Literatura Española",
                            NotasAdicionales = "Incluye lecturas obligatorias"
                        },
                        new
                        {
                            MateriaId = new Guid("bfde1ee6-d9ff-47fb-b6e4-10254aebce1c"),
                            Creditos = 6,
                            DepartamentoAcademico = "Biología",
                            Descripcion = "Análisis profundo de la biología celular",
                            Estado = "Activa",
                            HorasPracticas = 4,
                            HorasTeoricas = 4,
                            MetodosEnsenanza = "Clases teóricas, laboratorios, proyectos de investigación",
                            Nivel = "Universitaria",
                            Nombre = "Biología Avanzada",
                            NotasAdicionales = "Requiere conocimientos previos de biología básica"
                        },
                        new
                        {
                            MateriaId = new Guid("d44c5222-342d-41b7-bfe1-52c4ff88608a"),
                            Creditos = 3,
                            DepartamentoAcademico = "Historia",
                            Descripcion = "Exploración de eventos históricos globales",
                            Estado = "Activa",
                            HorasPracticas = 0,
                            HorasTeoricas = 3,
                            MetodosEnsenanza = "Clases teóricas, análisis de documentos históricos",
                            Nivel = "Secundaria",
                            Nombre = "Historia Mundial",
                            NotasAdicionales = "Se recomienda visitar museos y sitios históricos"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Docente.AsignacionDocente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocenteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MateriaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("DocenteId");

                    b.HasIndex("MateriaId");

                    b.ToTable("AsignacionesDocentes");
                });

            modelBuilder.Entity("Entities.Models.D_Docente.Docente", b =>
                {
                    b.Property<Guid>("DocenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComentariosNotas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoLaboral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaContratacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("HorarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NivelExperiencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTelefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TituloAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocenteId");

                    b.HasIndex("AulaId")
                        .IsUnique()
                        .HasFilter("[AulaId] IS NOT NULL");

                    b.HasIndex("HorarioId")
                        .IsUnique()
                        .HasFilter("[HorarioId] IS NOT NULL");

                    b.ToTable("Docentes");

                    b.HasData(
                        new
                        {
                            DocenteId = new Guid("a7b4b9fc-5c3f-4931-94a1-97acd227aacb"),
                            Apellidos = "Pérez",
                            ComentariosNotas = "Excelente capacidad de enseñanza",
                            CorreoElectronico = "juan.perez@email.com",
                            Direccion = "Calle Falsa 123",
                            EstadoLaboral = "Activo",
                            FechaContratacion = new DateTime(2010, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1980, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            NivelExperiencia = "Alto",
                            Nombres = "Juan",
                            NumeroIdentificacion = "12345678",
                            NumeroTelefono = "555-1234",
                            TituloAcademico = "Licenciado en Matemáticas"
                        },
                        new
                        {
                            DocenteId = new Guid("c62f30cc-0043-447a-ac30-e975fbe692ab"),
                            Apellidos = "González",
                            ComentariosNotas = "Experta en historia antigua",
                            CorreoElectronico = "maria.gonzalez@email.com",
                            Direccion = "Avenida Principal 456",
                            EstadoLaboral = "Activo",
                            FechaContratacion = new DateTime(2012, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1985, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            NivelExperiencia = "Medio",
                            Nombres = "María",
                            NumeroIdentificacion = "87654321",
                            NumeroTelefono = "555-5678",
                            TituloAcademico = "Doctora en Historia"
                        },
                        new
                        {
                            DocenteId = new Guid("b597ec03-9f5d-4fb6-9073-7d7d22ee8acb"),
                            Apellidos = "Martínez",
                            ComentariosNotas = "Gran habilidad en experimentos prácticos",
                            CorreoElectronico = "carlos.martinez@email.com",
                            Direccion = "Boulevard del Río 789",
                            EstadoLaboral = "Inactivo",
                            FechaContratacion = new DateTime(2008, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1975, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            NivelExperiencia = "Alto",
                            Nombres = "Carlos",
                            NumeroIdentificacion = "11223344",
                            NumeroTelefono = "555-9101",
                            TituloAcademico = "Magíster en Física"
                        },
                        new
                        {
                            DocenteId = new Guid("cdd1b82a-d39c-4c89-864b-68a09c20ac32"),
                            Apellidos = "Rodríguez",
                            ComentariosNotas = "Especialista en biología marina",
                            CorreoElectronico = "laura.rodriguez@email.com",
                            Direccion = "Callejón de los Milagros 101",
                            EstadoLaboral = "Activo",
                            FechaContratacion = new DateTime(2015, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaNacimiento = new DateTime(1990, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            NivelExperiencia = "Bajo",
                            Nombres = "Laura",
                            NumeroIdentificacion = "44332211",
                            NumeroTelefono = "555-1213",
                            TituloAcademico = "Licenciada en Biología"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.AsignacionEstudiante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AulasAulaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatoEstudianteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CursosCursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HorarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HorariosHorarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AulasAulaId");

                    b.HasIndex("CandidatoEstudianteId");

                    b.HasIndex("CursosCursoId");

                    b.HasIndex("HorariosHorarioId");

                    b.ToTable("AsignacionesEstudiantes");
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.CandidatoEstudiante", b =>
                {
                    b.Property<Guid>("CandidatoEstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdjuntarDocumentos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NumeroContacto")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroDocumento")
                        .HasColumnType("bigint");

                    b.Property<long>("NumeroIdentificacionAcudiente")
                        .HasColumnType("bigint");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoPersona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidatoEstudianteId");

                    b.ToTable("CandidatoEstudiantes");

                    b.HasData(
                        new
                        {
                            CandidatoEstudianteId = new Guid("57a9516f-7499-4718-a0ce-16743c1c2d98"),
                            AdjuntarDocumentos = "Documentos adjuntos",
                            Apellido = "Gomez",
                            Direccion = "Calle 123",
                            FechaNacimiento = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            Nombre = "Pedro",
                            NumeroContacto = 321L,
                            NumeroDocumento = 123L,
                            NumeroIdentificacionAcudiente = 0L,
                            TipoDocumento = "CC",
                            TipoPersona = "Estudiante"
                        },
                        new
                        {
                            CandidatoEstudianteId = new Guid("a2150ef0-9b62-4d0c-9276-491d8452e886"),
                            AdjuntarDocumentos = "Documentos adjuntos",
                            Apellido = "Rodriguez",
                            Direccion = "Carrera 456",
                            FechaNacimiento = new DateTime(1998, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            Nombre = "Ana",
                            NumeroContacto = 654L,
                            NumeroDocumento = 456L,
                            NumeroIdentificacionAcudiente = 0L,
                            TipoDocumento = "CC",
                            TipoPersona = "Estudiante"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.Cupo", b =>
                {
                    b.Property<Guid>("CupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CantidadDisponible")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CupoId");

                    b.ToTable("Cupo");

                    b.HasData(
                        new
                        {
                            CupoId = new Guid("9854916e-f268-4eac-a3ac-97f3675ac537"),
                            CantidadDisponible = 10,
                            Descripcion = "Cupo para el evento principal",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 5, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9742),
                            FechaInicio = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9738),
                            Ubicacion = "Salón principal"
                        },
                        new
                        {
                            CupoId = new Guid("b3fde559-f8dc-47c7-b2a2-4e37baa58cea"),
                            CantidadDisponible = 5,
                            Descripcion = "Cupo para el taller de programación",
                            Duracion = new TimeSpan(0, 3, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 6, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9753),
                            FechaInicio = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9753),
                            Ubicacion = "Aula 101"
                        },
                        new
                        {
                            CupoId = new Guid("2cceb5fa-c2ea-43b2-b4e6-ec6497786702"),
                            CantidadDisponible = 20,
                            Descripcion = "Cupo para el seminario de marketing",
                            Duracion = new TimeSpan(0, 4, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 7, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9756),
                            FechaInicio = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9756),
                            Ubicacion = "Aula 102"
                        },
                        new
                        {
                            CupoId = new Guid("c1403ae0-fc61-4f85-8ed5-cf921a2d7930"),
                            CantidadDisponible = 15,
                            Descripcion = "Cupo para el curso de diseño gráfico",
                            Duracion = new TimeSpan(0, 2, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 8, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9767),
                            FechaInicio = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9767),
                            Ubicacion = "Aula 103"
                        },
                        new
                        {
                            CupoId = new Guid("3aca8453-aff3-4f7b-842c-bfe22c40a728"),
                            CantidadDisponible = 30,
                            Descripcion = "Cupo para el evento de networking",
                            Duracion = new TimeSpan(0, 1, 0, 0, 0),
                            Estado = true,
                            FechaFin = new DateTime(2024, 9, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9771),
                            FechaInicio = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(9770),
                            Ubicacion = "Aula 104"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.EstudianteDocumentos", b =>
                {
                    b.Property<Guid>("EstudianteDocumentosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tamaño")
                        .HasColumnType("int");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstudianteDocumentosId");

                    b.ToTable("EstudianteDocumentos");

                    b.HasData(
                        new
                        {
                            EstudianteDocumentosId = new Guid("6a30c846-4b9d-4cf5-bb17-051a3e9d1b72"),
                            Estado = true,
                            NombreDocumento = "Certificado de Nacimiento",
                            NumeroDocumento = 61464465,
                            Observaciones = "Ninguna",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento1"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("2d54a999-187f-4a8c-99db-d17841e7938c"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8140),
                            NombreDocumento = "Diploma",
                            NumeroDocumento = 987654,
                            Observaciones = "Logros académicos",
                            Tamaño = 2048,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento2"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("3e68515e-3a47-4a62-a8c7-9f12242d020e"),
                            Estado = false,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8144),
                            NombreDocumento = "Certificado de Graduación",
                            NumeroDocumento = 123456,
                            Observaciones = "Graduación universitaria",
                            Tamaño = 1536,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento3"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("4a303cce-8c0e-4ae7-89c1-067d0b7741b6"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8152),
                            NombreDocumento = "Certificado de Matrícula",
                            NumeroDocumento = 789012,
                            Observaciones = "Matrícula escolar",
                            Tamaño = 8192,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento4"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("5f78d0e1-579e-4dfc-82a1-92010b4191d3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8155),
                            NombreDocumento = "Cédula de Identidad",
                            NumeroDocumento = 555555,
                            Observaciones = "Documento oficial",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento5"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("f38f6b1a-86e9-4d9d-8a7a-62f17e6f1ba2"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8158),
                            NombreDocumento = "Carné de Estudiante",
                            NumeroDocumento = 7890123,
                            Observaciones = "Carné escolar",
                            Tamaño = 3072,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento6"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("7e15d9a4-98cb-4d14-9a35-862f8c202725"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8161),
                            NombreDocumento = "Boleta de Calificaciones",
                            NumeroDocumento = 9876543,
                            Observaciones = "Registro académico",
                            Tamaño = 5120,
                            TipoDocumento = "Educativo",
                            Ubicacion = "ruta/al/documento7"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("8f4a67c2-fd5e-4316-8c50-7249f159d0f1"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8163),
                            NombreDocumento = "Pasaporte",
                            NumeroDocumento = 1234567,
                            Observaciones = "Documento de viaje",
                            Tamaño = 4096,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento8"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("9b9d6d8f-72f0-4f0a-8e18-1e75b0182e3f"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8165),
                            NombreDocumento = "Certificado Médico",
                            NumeroDocumento = 543210,
                            Observaciones = "Informe médico",
                            Tamaño = 2048,
                            TipoDocumento = "Salud",
                            Ubicacion = "ruta/al/documento9"
                        },
                        new
                        {
                            EstudianteDocumentosId = new Guid("10a5e754-1570-4be0-8650-2c53d7cfb4d3"),
                            Estado = true,
                            FechaActualizacion = new DateTime(2024, 4, 1, 18, 11, 10, 17, DateTimeKind.Local).AddTicks(8168),
                            NombreDocumento = "Fotografía del Estudiante",
                            NumeroDocumento = 1111111,
                            Observaciones = "Foto de perfil",
                            Tamaño = 1024,
                            TipoDocumento = "Identificación",
                            Ubicacion = "ruta/al/documento10"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Asistencia", b =>
                {
                    b.Property<int>("AsistenciaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsistenciaId"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaHoraAsistencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreAsistente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UbicacionEvento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AsistenciaId");

                    b.ToTable("Asistencia");

                    b.HasData(
                        new
                        {
                            AsistenciaId = 1,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Juan Pérez",
                            Notas = "Asistió puntualmente.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón A"
                        },
                        new
                        {
                            AsistenciaId = 2,
                            Asistio = false,
                            FechaHoraAsistencia = new DateTime(2023, 10, 4, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "María Rodríguez",
                            Notas = "No pudo asistir debido a un compromiso previo.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de juntas"
                        },
                        new
                        {
                            AsistenciaId = 3,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Carlos González",
                            Notas = "Participó activamente en el taller.",
                            TipoEvento = "Taller",
                            UbicacionEvento = "Aula 101"
                        },
                        new
                        {
                            AsistenciaId = 4,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 6, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Ana López",
                            Notas = "Tomó notas detalladas durante la conferencia.",
                            TipoEvento = "Conferencia",
                            UbicacionEvento = "Salón B"
                        },
                        new
                        {
                            AsistenciaId = 5,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 7, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Pedro Ramírez",
                            Notas = "Participó en la discusión de temas importantes.",
                            TipoEvento = "Reunión",
                            UbicacionEvento = "Sala de conferencias"
                        },
                        new
                        {
                            AsistenciaId = 6,
                            Asistio = true,
                            FechaHoraAsistencia = new DateTime(2023, 10, 8, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            NombreAsistente = "Laura Martínez",
                            Notas = "Hizo preguntas interesantes durante el seminario.",
                            TipoEvento = "Seminario",
                            UbicacionEvento = "Auditorio"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Estadisticas", b =>
                {
                    b.Property<int>("EstadisticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadisticaId"));

                    b.Property<int>("AñoEscolar")
                        .HasColumnType("int");

                    b.Property<int>("CantidadExamenes")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NotaMaxima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaMinima")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NotaPromedio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PeriodoEscolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstadisticaId");

                    b.ToTable("Estadisticas");

                    b.HasData(
                        new
                        {
                            EstadisticaId = 1,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(4830),
                            Materia = "Matemáticas",
                            NotaMaxima = 9.0m,
                            NotaMinima = 7.5m,
                            NotaPromedio = 8.5m,
                            PeriodoEscolar = "Primer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 2,
                            AñoEscolar = 2023,
                            CantidadExamenes = 4,
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(4839),
                            Materia = "Ciencias",
                            NotaMaxima = 8.5m,
                            NotaMinima = 6.5m,
                            NotaPromedio = 7.8m,
                            PeriodoEscolar = "Segundo Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 3,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(4841),
                            Materia = "Historia",
                            NotaMaxima = 9.5m,
                            NotaMinima = 8.5m,
                            NotaPromedio = 9.2m,
                            PeriodoEscolar = "Tercer Trimestre"
                        },
                        new
                        {
                            EstadisticaId = 4,
                            AñoEscolar = 2023,
                            CantidadExamenes = 5,
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(4843),
                            Materia = "Lenguaje",
                            NotaMaxima = 8.0m,
                            NotaMinima = 6.0m,
                            NotaPromedio = 7.2m,
                            PeriodoEscolar = "Primer Semestre"
                        },
                        new
                        {
                            EstadisticaId = 5,
                            AñoEscolar = 2023,
                            CantidadExamenes = 2,
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(4846),
                            Materia = "Arte",
                            NotaMaxima = 9.0m,
                            NotaMinima = 8.0m,
                            NotaPromedio = 8.7m,
                            PeriodoEscolar = "Segundo Semestre"
                        },
                        new
                        {
                            EstadisticaId = 6,
                            AñoEscolar = 2023,
                            CantidadExamenes = 3,
                            FechaRegistro = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(4848),
                            Materia = "Educación Física",
                            NotaMaxima = 10.0m,
                            NotaMinima = 9.0m,
                            NotaPromedio = 9.5m,
                            PeriodoEscolar = "Trimestre Extra"
                        });
                });

            modelBuilder.Entity("Entities.Models.D_Notas.Notas", b =>
                {
                    b.Property<int>("NotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotaId"));

                    b.Property<string>("Curso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionNota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estudiante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Materia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoNota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValorNota")
                        .HasColumnType("int");

                    b.HasKey("NotaId");

                    b.ToTable("Notas");

                    b.HasData(
                        new
                        {
                            NotaId = 1,
                            Curso = "Matemáticas",
                            DescripcionNota = "Examen de mitad de periodo",
                            Estudiante = "Juan Pérez",
                            FechaCreacion = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(5868),
                            Materia = "Álgebra",
                            PeriodoAcademico = "Cuarto Periodo",
                            TipoNota = "Examen",
                            ValorNota = 85
                        },
                        new
                        {
                            NotaId = 2,
                            Curso = "Ciencias",
                            DescripcionNota = "Informe de laboratorio",
                            Estudiante = "María López",
                            FechaCreacion = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(5874),
                            Materia = "Biología",
                            PeriodoAcademico = "Primer Periodo",
                            TipoNota = "Trabajo Práctico",
                            ValorNota = 90
                        },
                        new
                        {
                            NotaId = 3,
                            Curso = "Historia",
                            DescripcionNota = "Exposición sobre la Revolución Francesa",
                            Estudiante = "Carlos Gómez",
                            FechaCreacion = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(5876),
                            Materia = "Historia Mundial",
                            PeriodoAcademico = "Segundo Periodo",
                            TipoNota = "Exposición",
                            ValorNota = 78
                        },
                        new
                        {
                            NotaId = 4,
                            Curso = "Literatura",
                            DescripcionNota = "Análisis del Quijote",
                            Estudiante = "Lucía Fernández",
                            FechaCreacion = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(5878),
                            Materia = "Literatura Española",
                            PeriodoAcademico = "Segundo Periodo",
                            TipoNota = "Ensayo",
                            ValorNota = 92
                        },
                        new
                        {
                            NotaId = 5,
                            Curso = "Física",
                            DescripcionNota = "Evaluación final del curso",
                            Estudiante = "Andrés Martínez",
                            FechaCreacion = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(5880),
                            Materia = "Física Cuántica",
                            PeriodoAcademico = "Primer Periodo",
                            TipoNota = "Examen Final",
                            ValorNota = 88
                        });
                });

            modelBuilder.Entity("Entities.Models.LOGIN.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ContrasenaHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ContrasenaSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Entities.Models.Matricula", b =>
                {
                    b.Property<Guid>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoriaMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaMatricula")
                        .HasColumnType("datetime2");

                    b.Property<string>("InformacionPlanEstudios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodoAcademico")
                        .HasColumnType("int");

                    b.Property<string>("RegistroCambios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatriculaId");

                    b.ToTable("Matricula");

                    b.HasData(
                        new
                        {
                            MatriculaId = new Guid("d9ffa682-f99c-4f53-914d-1a290ac740fc"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 1",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 4, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(1346),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 1",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("0852ff3c-ff6e-4710-9f14-f9bfbe74763e"),
                            CategoriaMatricula = "Estudiante de Tiempo Parcial",
                            Comentarios = "Comentario sobre la matrícula 2",
                            EstadoMatricula = "Pendiente",
                            FechaMatricula = new DateTime(2024, 5, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(1352),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 2",
                            TipoMatricula = "Matrícula Parcial"
                        },
                        new
                        {
                            MatriculaId = new Guid("3c8ddd47-81fe-4b0a-aae2-437f6db9da90"),
                            CategoriaMatricula = "Estudiante Internacional",
                            Comentarios = "Comentario sobre la matrícula 3",
                            EstadoMatricula = "Cancelada",
                            FechaMatricula = new DateTime(2024, 6, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(1356),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 3",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("506645b0-bf4f-42a3-9b83-0e8544456690"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 4",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 7, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(1360),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 4",
                            TipoMatricula = "Matrícula Regular"
                        },
                        new
                        {
                            MatriculaId = new Guid("86e75d50-92e2-4f80-abcc-fe61fcc26513"),
                            CategoriaMatricula = "Estudiante de Tiempo Completo",
                            Comentarios = "Comentario sobre la matrícula 5",
                            EstadoMatricula = "Activa",
                            FechaMatricula = new DateTime(2024, 8, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(1363),
                            InformacionPlanEstudios = "Plan de estudios 2023",
                            PeriodoAcademico = 2024,
                            RegistroCambios = "Registro de cambios 5",
                            TipoMatricula = "Matrícula Regular"
                        });
                });

            modelBuilder.Entity("Entities.Models.PreMatricula", b =>
                {
                    b.Property<Guid>("PreMatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EstadoPreMatricula")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradoONivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequisitosDocumentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreMatriculaId");

                    b.ToTable("PreMatricula");

                    b.HasData(
                        new
                        {
                            PreMatriculaId = new Guid("c63ec83b-2136-4570-8763-57178998c106"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Quinto de Primaria",
                            Observaciones = "Estudiante con requerimientos especiales.",
                            RequisitosDocumentacion = "NoCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("ab534487-9950-4830-b976-62f614fac924"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Séptimo de Secundaria",
                            Observaciones = "Estudiante de transferencia.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("0e7a844c-5d34-4748-8b03-a7be087f734d"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Tercero de Primaria",
                            Observaciones = "Estudiante extranjero.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("b613ab47-2d52-4031-9057-f05d9bd0ef9c"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Cuarto de Secundaria",
                            Observaciones = "Estudiante con beca deportiva.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Tarde"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("51543b4f-dc53-4c34-bb7d-6835d15fb0ff"),
                            EstadoPreMatricula = "Activa",
                            GradoONivel = "Segundo de Primaria",
                            Observaciones = "Estudiante con discapacidad visual.",
                            RequisitosDocumentacion = "SiCumplio",
                            Turno = "Mañana"
                        },
                        new
                        {
                            PreMatriculaId = new Guid("9ba0f1b9-5a54-4b06-be81-d5c4ec10e9cc"),
                            EstadoPreMatricula = "Pendiente",
                            GradoONivel = "Octavo de Secundaria",
                            Observaciones = "Estudiante sin observaciones adicionales.",
                            RequisitosDocumentacion = "Si cumplio",
                            Turno = "Tarde"
                        });
                });

            modelBuilder.Entity("Entities.Models.RespuestaCupo", b =>
                {
                    b.Property<Guid>("RespuestaCupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("DuracionRespuesta")
                        .HasColumnType("time");

                    b.Property<string>("EstadoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("MensajeRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RespuestaCupoId");

                    b.ToTable("RespuestaCupo");

                    b.HasData(
                        new
                        {
                            RespuestaCupoId = new Guid("d186cbf8-9bec-4d73-b676-ada5c0acf7c8"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 4, 2, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(278),
                            FechaVencimiento = new DateTime(2024, 5, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(285),
                            MensajeRespuesta = "Respuesta 1",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario1"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("c58634fa-2493-4e2c-9900-b4797b42e738"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 4, 3, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(291),
                            FechaVencimiento = new DateTime(2024, 6, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(292),
                            MensajeRespuesta = "Respuesta 2",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario2"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("e793a71b-af82-4af6-82c4-a24fbbf89c74"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 4, 4, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(294),
                            FechaVencimiento = new DateTime(2024, 7, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(295),
                            MensajeRespuesta = "Respuesta 3",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario3"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("42f4dcc3-da3b-4aaf-936d-1a921d9c8aad"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 4, 5, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(298),
                            FechaVencimiento = new DateTime(2024, 8, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(299),
                            MensajeRespuesta = "Respuesta 4",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario4"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("04c394dd-d7b4-4d18-a13f-d2343c3a3ab4"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 4, 6, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(301),
                            FechaVencimiento = new DateTime(2024, 9, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(302),
                            MensajeRespuesta = "Respuesta 5",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario5"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("9afe1fdd-306c-47a9-bf96-2dc5187a61b1"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 4, 7, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(305),
                            FechaVencimiento = new DateTime(2024, 10, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(306),
                            MensajeRespuesta = "Respuesta 6",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario6"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("dbca6175-21b4-4379-8bae-017dc1a34445"),
                            DuracionRespuesta = new TimeSpan(45, 0, 0, 0, 0),
                            EstadoRespuesta = "Rechazada",
                            FechaRespuesta = new DateTime(2024, 4, 8, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(313),
                            FechaVencimiento = new DateTime(2024, 11, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(314),
                            MensajeRespuesta = "Respuesta 7",
                            Prioridad = "Media",
                            TipoRespuesta = "Rechazo",
                            UsuarioRespuesta = "Usuario7"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("1e7c70d3-2ab7-4771-971e-6fc5f29fb99a"),
                            DuracionRespuesta = new TimeSpan(60, 0, 0, 0, 0),
                            EstadoRespuesta = "Pendiente",
                            FechaRespuesta = new DateTime(2024, 4, 9, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(317),
                            FechaVencimiento = new DateTime(2024, 12, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(317),
                            MensajeRespuesta = "Respuesta 8",
                            Prioridad = "Baja",
                            TipoRespuesta = "Pendiente",
                            UsuarioRespuesta = "Usuario8"
                        },
                        new
                        {
                            RespuestaCupoId = new Guid("5c84593e-8103-4a62-bf2d-5162695efe8d"),
                            DuracionRespuesta = new TimeSpan(30, 0, 0, 0, 0),
                            EstadoRespuesta = "Aceptada",
                            FechaRespuesta = new DateTime(2024, 4, 10, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(320),
                            FechaVencimiento = new DateTime(2025, 1, 1, 18, 11, 10, 18, DateTimeKind.Local).AddTicks(321),
                            MensajeRespuesta = "Respuesta 9",
                            Prioridad = "Alta",
                            TipoRespuesta = "Aceptación",
                            UsuarioRespuesta = "Usuario9"
                        });
                });

            modelBuilder.Entity("AcudienteCandidatoEstudiante", b =>
                {
                    b.HasOne("Entities.Models.D_Acudiente.Acudiente", null)
                        .WithMany()
                        .HasForeignKey("AcudienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_Estudiante.CandidatoEstudiante", null)
                        .WithMany()
                        .HasForeignKey("CandidatoEstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CursoDocente", b =>
                {
                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Cursos", null)
                        .WithMany()
                        .HasForeignKey("CursosCursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_Docente.Docente", null)
                        .WithMany()
                        .HasForeignKey("DocentesDocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocenteMateria", b =>
                {
                    b.HasOne("Entities.Models.D_Docente.Docente", null)
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Materias", null)
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.DireccionAcudiente", b =>
                {
                    b.HasOne("Entities.Models.D_Acudiente.Acudiente", "Acudiente")
                        .WithOne("DireccionAcudiente")
                        .HasForeignKey("Entities.Models.D_Acudiente.DireccionAcudiente", "AcudienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acudiente");
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.TelefonoAcudiente", b =>
                {
                    b.HasOne("Entities.Models.D_Acudiente.Acudiente", "Acudiente")
                        .WithMany("TelefonosAcudiente")
                        .HasForeignKey("AcudienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acudiente");
                });

            modelBuilder.Entity("Entities.Models.D_Docente.AsignacionDocente", b =>
                {
                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Cursos", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_Docente.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Materias", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Docente");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("Entities.Models.D_Docente.Docente", b =>
                {
                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Aulas", "Aula")
                        .WithOne("Docente")
                        .HasForeignKey("Entities.Models.D_Docente.Docente", "AulaId");

                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Horarios", "Horario")
                        .WithOne("Docente")
                        .HasForeignKey("Entities.Models.D_Docente.Docente", "HorarioId");

                    b.Navigation("Aula");

                    b.Navigation("Horario");
                });

            modelBuilder.Entity("Entities.Models.D_Estudiante.AsignacionEstudiante", b =>
                {
                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Aulas", "Aulas")
                        .WithMany()
                        .HasForeignKey("AulasAulaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_Estudiante.CandidatoEstudiante", "CandidatoEstudiante")
                        .WithMany()
                        .HasForeignKey("CandidatoEstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Cursos", "Cursos")
                        .WithMany()
                        .HasForeignKey("CursosCursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.D_DepartamentoAcademico.Horarios", "Horarios")
                        .WithMany()
                        .HasForeignKey("HorariosHorarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aulas");

                    b.Navigation("CandidatoEstudiante");

                    b.Navigation("Cursos");

                    b.Navigation("Horarios");
                });

            modelBuilder.Entity("Entities.Models.D_Acudiente.Acudiente", b =>
                {
                    b.Navigation("DireccionAcudiente")
                        .IsRequired();

                    b.Navigation("TelefonosAcudiente");
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Aulas", b =>
                {
                    b.Navigation("Docente")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.D_DepartamentoAcademico.Horarios", b =>
                {
                    b.Navigation("Docente")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
